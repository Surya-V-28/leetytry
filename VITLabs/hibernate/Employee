 class SafeDivisionExample {
    private static int A = 5; // Initial value of A
    private static int B;
    private static int C = 10; // Some value for C

    public static void main(String[] args) throws InterruptedException {

        // Thread 1: Checks A != 0, and performs division with synchronization
        Thread t1 = new Thread(() -> {
            synchronized (SafeDivisionExample.class) {  // Synchronize on class level (or A)
                System.out.println("Thread 1: Checking if A != 0");

                // Check if A is not zero before performing division
                if (A != 0) {
                    B = C / A; // Division operation
                    System.out.println("Thread 1: Division successful, B = " + B);
                } else {
                    System.out.println("Thread 1: Division by zero error! A is zero.");
                }
            }
        });

        // Thread 2: Modifies A (introducing a race condition if not synchronized)
        Thread t2 = new Thread(() -> {
            synchronized (SafeDivisionExample.class) {  // Synchronize on class level (or A)
                A = 0; // Setting A to 0 to simulate a potential race condition
                System.out.println("Thread 2: Modified A to " + A);
            }
        });

        // Start both threads
        t1.start();
        t2.start();

        // Wait for both threads to finish
        t1.join();
        t2.join();

        // Thread 1 re-checks after Thread 2 has modified A
        Thread t3 = new Thread(() -> {
            synchronized (SafeDivisionExample.class) {
                System.out.println("Thread 3: Rechecking if A != 0");

                if (A != 0) {
                    B = C / A; // Perform division again
                    System.out.println("Thread 3: Division successful, B = " + B);
                } else {
                    System.out.println("Thread 3: Division by zero error! A is zero.");
                }
            }
        });

        // Start thread 3 to check the final value of A
        t3.start();
        t3.join(); // Wait for thread 3 to finish
    }
}
