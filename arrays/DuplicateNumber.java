

import java.util.*;



public class DuplicateNumber {
    public static void main(String args[] ){
        ArrayList<Integer> list  = new ArrayList<>();
        
    
    }
}


class DiffireentWaystoFindDuplicate { 
    public static void BruteForce(int[] nums) {
        int[] ns =   {148, 129, 206, 215, 113, 21, 42, 100, 164, 135, 238, 151, 182, 18, 114, 260, 59, 169, 132, 162, 25, 145, 52, 39, 158, 90, 82, 161, 191, 216, 17, 49, 166, 149, 93, 142, 20, 77, 136, 201, 76, 122, 121, 173, 78, 155, 225, 247, 26, 171, 69, 199, 87, 141, 30, 134, 47, 245, 219, 259, 221, 40, 1, 266, 156, 160, 229, 98, 70, 120, 125, 254, 108, 175, 231, 94, 211, 60, 264, 208, 179, 153, 73, 224, 235, 159, 6, 222, 210, 88, 232, 217, 24, 11, 53, 19, 126, 86, 31, 167, 230, 207, 258, 184, 194, 261, 33, 54, 143, 248, 195, 246, 237, 257, 185, 124, 106, 249, 147, 43, 198, 251, 38, 119, 192, 116, 240, 178, 226, 218, 263, 256, 101, 68, 66, 146, 234, 165, 144, 267, 5, 48, 157, 269, 45, 223, 268, 131, 46, 74, 128, 72, 84, 181, 112, 104, 2, 236, 176, 29, 105, 103, 97, 265, 138, 9, 50, 10, 102, 186, 203, 123, 239, 188, 250, 80, 63, 65, 243, 227, 51, 61, 71, 58, 220, 7, 3, 170, 36, 241, 118, 37, 212, 107, 23, 96, 183, 89, 75, 150, 99, 133, 193, 196, 214, 255, 79, 189, 177, 22, 204, 111, 190, 8, 110, 205, 44, 172, 41, 253, 91, 262, 137, 202, 168, 242, 115, 16, 233, 140, 55, 200, 252, 127, 174, 81, 4, 56, 130, 213, 152, 117, 15, 95, 85, 57, 14, 62, 187, 34, 64, 28, 180, 92, 197, 67, 228, 32, 209, 154, 27, 109, 163, 13, 35, 177, 12, 139, 244, 83};
        int i=0;
        Arrays.sort(ns);
        for(i=0;i<ns.length-1;i++){
            if(ns[i] ==ns[i+1]){
                System.out.println(ns[i]);
                break;
            }
           
        }
        System.out.println(ns[i]);
    }


    public static void UsingSet(int[] nums) {
        HashSet<Integer> hash = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(hash.contains(nums[i])){
                System.out.println("Duplicate found at" + nums[i]);
                break;
            }
            hash.add(nums[i]);
        }

    }


    public static void UsingCycleCheckerPointerNegativeIndex(int[] nums){
        
    }
}